# python build stubs for package client
# File is generated by gopy. Do not edit.
# gopy build -output pycli -vm=python3 github.com/mason-leap-lab/infinicache/client

from pybindgen import retval, param, Function, Module
import sys

class CheckedFunction(Function):
    def __init__(self, *a, **kw):
        super(CheckedFunction, self).__init__(*a, **kw)
        self._failure_expression = kw.get('failure_expression', '')
        self._failure_cleanup = kw.get('failure_cleanup', '')

    def set_failure_expression(self, expr):
        self._failure_expression = expr

    def set_failure_cleanup(self, expr):
        self._failure_cleanup = expr

    def generate_call(self):
        super(CheckedFunction, self).generate_call()
        check = "PyErr_Occurred()"
        if self._failure_expression:
            check = "{} && {}".format(self._failure_expression, check)
        failure_cleanup = self._failure_cleanup or None
        self.before_call.write_error_check(check, failure_cleanup)

def add_checked_function(mod, name, retval, params, failure_expression='', *a, **kw):
    fn = CheckedFunction(name, retval, params, *a, **kw)
    fn.set_failure_expression(failure_expression)
    mod._add_function_obj(fn)
    return fn

def add_checked_string_function(mod, name, retval, params, failure_expression='', *a, **kw):
    fn = CheckedFunction(name, retval, params, *a, **kw)
    fn.set_failure_cleanup('if (retval != NULL) free(retval);')
    fn.after_call.add_cleanup_code('free(retval);')
    fn.set_failure_expression(failure_expression)
    mod._add_function_obj(fn)
    return fn

mod = Module('_client')
mod.add_include('"client_go.h"')
mod.add_function('GoPyInit', None, [])
mod.add_function('DecRef', None, [param('int64_t', 'handle')])
mod.add_function('IncRef', None, [param('int64_t', 'handle')])
mod.add_function('NumHandles', retval('int'), [])
mod.add_function('Slice_bool_CTor', retval('int64_t'), [])
mod.add_function('Slice_bool_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_bool_elem', retval('bool'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_bool_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_bool_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('bool', 'value')])
mod.add_function('Slice_bool_append', None, [param('int64_t', 'handle'), param('bool', 'value')])
mod.add_function('Slice_byte_CTor', retval('int64_t'), [])
mod.add_function('Slice_byte_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_byte_elem', retval('uint8_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_byte_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_byte_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('uint8_t', 'value')])
mod.add_function('Slice_byte_append', None, [param('int64_t', 'handle'), param('uint8_t', 'value')])
mod.add_function('Slice_float32_CTor', retval('int64_t'), [])
mod.add_function('Slice_float32_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_float32_elem', retval('float'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_float32_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_float32_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('float', 'value')])
mod.add_function('Slice_float32_append', None, [param('int64_t', 'handle'), param('float', 'value')])
mod.add_function('Slice_float64_CTor', retval('int64_t'), [])
mod.add_function('Slice_float64_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_float64_elem', retval('double'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_float64_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_float64_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('double', 'value')])
mod.add_function('Slice_float64_append', None, [param('int64_t', 'handle'), param('double', 'value')])
mod.add_function('Slice_int_CTor', retval('int64_t'), [])
mod.add_function('Slice_int_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_int_elem', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_int_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_int_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int64_t', 'value')])
mod.add_function('Slice_int_append', None, [param('int64_t', 'handle'), param('int64_t', 'value')])
mod.add_function('Slice_int16_CTor', retval('int64_t'), [])
mod.add_function('Slice_int16_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_int16_elem', retval('int16_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_int16_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_int16_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int16_t', 'value')])
mod.add_function('Slice_int16_append', None, [param('int64_t', 'handle'), param('int16_t', 'value')])
mod.add_function('Slice_int32_CTor', retval('int64_t'), [])
mod.add_function('Slice_int32_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_int32_elem', retval('int32_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_int32_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_int32_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int32_t', 'value')])
mod.add_function('Slice_int32_append', None, [param('int64_t', 'handle'), param('int32_t', 'value')])
mod.add_function('Slice_int64_CTor', retval('int64_t'), [])
mod.add_function('Slice_int64_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_int64_elem', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_int64_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_int64_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int64_t', 'value')])
mod.add_function('Slice_int64_append', None, [param('int64_t', 'handle'), param('int64_t', 'value')])
mod.add_function('Slice_int8_CTor', retval('int64_t'), [])
mod.add_function('Slice_int8_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_int8_elem', retval('int8_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_int8_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_int8_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int8_t', 'value')])
mod.add_function('Slice_int8_append', None, [param('int64_t', 'handle'), param('int8_t', 'value')])
mod.add_function('Slice_rune_CTor', retval('int64_t'), [])
mod.add_function('Slice_rune_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_rune_elem', retval('int32_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_rune_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_rune_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int32_t', 'value')])
mod.add_function('Slice_rune_append', None, [param('int64_t', 'handle'), param('int32_t', 'value')])
mod.add_function('Slice_string_CTor', retval('int64_t'), [])
mod.add_function('Slice_string_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_string_elem', retval('char*'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_string_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_string_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('char*', 'value')])
mod.add_function('Slice_string_append', None, [param('int64_t', 'handle'), param('char*', 'value')])
mod.add_function('Slice_uint_CTor', retval('int64_t'), [])
mod.add_function('Slice_uint_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_uint_elem', retval('uint64_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_uint_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_uint_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('uint64_t', 'value')])
mod.add_function('Slice_uint_append', None, [param('int64_t', 'handle'), param('uint64_t', 'value')])
mod.add_function('Slice_uint16_CTor', retval('int64_t'), [])
mod.add_function('Slice_uint16_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_uint16_elem', retval('uint16_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_uint16_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_uint16_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('uint16_t', 'value')])
mod.add_function('Slice_uint16_append', None, [param('int64_t', 'handle'), param('uint16_t', 'value')])
mod.add_function('Slice_uint32_CTor', retval('int64_t'), [])
mod.add_function('Slice_uint32_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_uint32_elem', retval('uint32_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_uint32_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_uint32_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('uint32_t', 'value')])
mod.add_function('Slice_uint32_append', None, [param('int64_t', 'handle'), param('uint32_t', 'value')])
mod.add_function('Slice_uint64_CTor', retval('int64_t'), [])
mod.add_function('Slice_uint64_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_uint64_elem', retval('uint64_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_uint64_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_uint64_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('uint64_t', 'value')])
mod.add_function('Slice_uint64_append', None, [param('int64_t', 'handle'), param('uint64_t', 'value')])
mod.add_function('Slice_uint8_CTor', retval('int64_t'), [])
mod.add_function('Slice_uint8_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_uint8_elem', retval('uint8_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_uint8_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_uint8_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('uint8_t', 'value')])
mod.add_function('Slice_uint8_append', None, [param('int64_t', 'handle'), param('uint8_t', 'value')])
mod.add_function('Slice_Slice_byte_CTor', retval('int64_t'), [])
mod.add_function('Slice_Slice_byte_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_Slice_byte_elem', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_Slice_byte_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_Slice_byte_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int64_t', 'value')])
mod.add_function('Slice_Slice_byte_append', None, [param('int64_t', 'handle'), param('int64_t', 'value')])
mod.add_function('Slice_consistent_Member_CTor', retval('int64_t'), [])
mod.add_function('Slice_consistent_Member_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_consistent_Member_elem', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_consistent_Member_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_consistent_Member_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int64_t', 'value')])
mod.add_function('Slice_consistent_Member_append', None, [param('int64_t', 'handle'), param('int64_t', 'value')])
mod.add_function('Map_string_float64_CTor', retval('int64_t'), [])
mod.add_function('Map_string_float64_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Map_string_float64_elem', retval('double'), [param('int64_t', 'handle'), param('char*', '_ky')])
mod.add_function('Map_string_float64_contains', retval('bool'), [param('int64_t', 'handle'), param('char*', '_ky')])
mod.add_function('Map_string_float64_set', None, [param('int64_t', 'handle'), param('char*', 'key'), param('double', 'value')])
mod.add_function('Map_string_float64_delete', None, [param('int64_t', 'handle'), param('char*', '_ky')])
mod.add_function('Map_string_float64_keys', retval('int64_t'), [param('int64_t', 'handle')])
mod.add_function('Map_string_interface__CTor', retval('int64_t'), [])
mod.add_function('Map_string_interface__len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Map_string_interface__elem', retval('char*'), [param('int64_t', 'handle'), param('char*', '_ky')])
mod.add_function('Map_string_interface__contains', retval('bool'), [param('int64_t', 'handle'), param('char*', '_ky')])
mod.add_function('Map_string_interface__set', None, [param('int64_t', 'handle'), param('char*', 'key'), param('char*', 'value')])
mod.add_function('Map_string_interface__delete', None, [param('int64_t', 'handle'), param('char*', '_ky')])
mod.add_function('Map_string_interface__keys', retval('int64_t'), [param('int64_t', 'handle')])
mod.add_function('client_ECConfig', retval('int64_t'), [])
mod.add_function('client_Set_ECConfig', None, [param('int64_t', 'val')])
mod.add_function('client_HeaderTimeout', retval('int64_t'), [])
mod.add_function('client_Set_HeaderTimeout', None, [param('int64_t', 'val')])
mod.add_function('client_MaxLambdaStores', retval('int64_t'), [])
mod.add_function('client_Set_MaxLambdaStores', None, [param('int64_t', 'val')])
mod.add_function('client_OccupantReadAllCloser', retval('int64_t'), [])
mod.add_function('client_Set_OccupantReadAllCloser', None, [param('int64_t', 'val')])
mod.add_function('client_PreflightTimeout', retval('int64_t'), [])
mod.add_function('client_Set_PreflightTimeout', None, [param('int64_t', 'val')])
mod.add_function('client_RequestAttempts', retval('int64_t'), [])
mod.add_function('client_Set_RequestAttempts', None, [param('int64_t', 'val')])
mod.add_function('client_Timeout', retval('int64_t'), [])
mod.add_function('client_Set_Timeout', None, [param('int64_t', 'val')])
add_checked_function(mod, 'client_ReadAllCloser_Close', retval('char*'), [param('int64_t', '_handle')])
add_checked_function(mod, 'client_ReadAllCloser_Len', retval('int64_t'), [param('int64_t', '_handle')])
add_checked_function(mod, 'client_ReadAllCloser_Read', retval('int64_t'), [param('int64_t', '_handle'), param('int64_t', 'p')])
add_checked_function(mod, 'client_ReadAllCloser_ReadAll', retval('int64_t'), [param('int64_t', '_handle')])
add_checked_function(mod, 'client_WaitGroup_Add', None, [param('int64_t', '_handle'), param('int64_t', 'arg_0'), param('bool', 'goRun')])
add_checked_function(mod, 'client_WaitGroup_Done', None, [param('int64_t', '_handle'), param('bool', 'goRun')])
add_checked_function(mod, 'client_WaitGroup_Wait', None, [param('int64_t', '_handle'), param('bool', 'goRun')])
mod.add_function('client_ClientConnMeta_CTor', retval('int64_t'), [])
mod.add_function('client_ClientConnMeta_Addr_Get', retval('char*'), [param('int64_t', 'handle')])
mod.add_function('client_ClientConnMeta_Addr_Set', None, [param('int64_t', 'handle'), param('char*', 'val')])
mod.add_function('client_ClientConnMeta_AddrIdx_Get', retval('int64_t'), [param('int64_t', 'handle')])
mod.add_function('client_ClientConnMeta_AddrIdx_Set', None, [param('int64_t', 'handle'), param('int64_t', 'val')])
mod.add_function('client_ClientRequest_CTor', retval('int64_t'), [])
mod.add_function('client_ClientRequest_Cmd_Get', retval('char*'), [param('int64_t', 'handle')])
mod.add_function('client_ClientRequest_Cmd_Set', None, [param('int64_t', 'handle'), param('char*', 'val')])
mod.add_function('client_ClientRequest_ReqId_Get', retval('char*'), [param('int64_t', 'handle')])
mod.add_function('client_ClientRequest_ReqId_Set', None, [param('int64_t', 'handle'), param('char*', 'val')])
mod.add_function('client_DummyEncoder_CTor', retval('int64_t'), [])
mod.add_function('client_DummyEncoder_DataShards_Get', retval('int64_t'), [param('int64_t', 'handle')])
mod.add_function('client_DummyEncoder_DataShards_Set', None, [param('int64_t', 'handle'), param('int64_t', 'val')])
add_checked_function(mod, 'client_DummyEncoder_Encode', retval('char*'), [param('int64_t', '_handle'), param('int64_t', 'shards')])
add_checked_function(mod, 'client_DummyEncoder_Verify', retval('bool'), [param('int64_t', '_handle'), param('int64_t', 'shards')])
add_checked_function(mod, 'client_DummyEncoder_Reconstruct', retval('char*'), [param('int64_t', '_handle'), param('int64_t', 'shards')])
add_checked_function(mod, 'client_DummyEncoder_ReconstructData', retval('char*'), [param('int64_t', '_handle'), param('int64_t', 'shards')])
add_checked_function(mod, 'client_DummyEncoder_Update', retval('char*'), [param('int64_t', '_handle'), param('int64_t', 'shards'), param('int64_t', 'newDatashards')])
add_checked_function(mod, 'client_DummyEncoder_Split', retval('int64_t'), [param('int64_t', '_handle'), param('int64_t', 'data')])
add_checked_function(mod, 'client_DummyEncoder_Join', retval('char*'), [param('int64_t', '_handle'), param('int64_t', 'dst'), param('int64_t', 'shards'), param('int64_t', 'outSize')])
mod.add_function('client_JoinReader_CTor', retval('int64_t'), [])
add_checked_function(mod, 'client_JoinReader_Read', retval('int64_t'), [param('int64_t', '_handle'), param('int64_t', 'p')])
add_checked_function(mod, 'client_JoinReader_Len', retval('int64_t'), [param('int64_t', '_handle')])
add_checked_function(mod, 'client_JoinReader_ReadAll', retval('int64_t'), [param('int64_t', '_handle')])
add_checked_function(mod, 'client_JoinReader_Close', retval('char*'), [param('int64_t', '_handle')])
mod.add_function('client_PooledClient_CTor', retval('int64_t'), [])
mod.add_function('client_PooledClient_Concurrency_Get', retval('int64_t'), [param('int64_t', 'handle')])
mod.add_function('client_PooledClient_Concurrency_Set', None, [param('int64_t', 'handle'), param('int64_t', 'val')])
mod.add_function('client_PooledClient_NumDataShards_Get', retval('int64_t'), [param('int64_t', 'handle')])
mod.add_function('client_PooledClient_NumDataShards_Set', None, [param('int64_t', 'handle'), param('int64_t', 'val')])
mod.add_function('client_PooledClient_NumParityShards_Get', retval('int64_t'), [param('int64_t', 'handle')])
mod.add_function('client_PooledClient_NumParityShards_Set', None, [param('int64_t', 'handle'), param('int64_t', 'val')])
mod.add_function('client_PooledClient_ECMaxGoroutine_Get', retval('int64_t'), [param('int64_t', 'handle')])
mod.add_function('client_PooledClient_ECMaxGoroutine_Set', None, [param('int64_t', 'handle'), param('int64_t', 'val')])
add_checked_function(mod, 'client_PooledClient_Get', retval('int64_t'), [param('int64_t', '_handle'), param('char*', 'key')])
add_checked_function(mod, 'client_PooledClient_Set', retval('char*'), [param('int64_t', '_handle'), param('char*', 'key'), param('int64_t', 'val')])
add_checked_function(mod, 'client_PooledClient_Close', None, [param('int64_t', '_handle'), param('bool', 'goRun')])
mod.add_function('client_Client_CTor', retval('int64_t'), [])
mod.add_function('client_Client_EC_Get', retval('int64_t'), [param('int64_t', 'handle')])
mod.add_function('client_Client_EC_Set', None, [param('int64_t', 'handle'), param('int64_t', 'val')])
mod.add_function('client_Client_Ring_Get', retval('int64_t'), [param('int64_t', 'handle')])
mod.add_function('client_Client_Ring_Set', None, [param('int64_t', 'handle'), param('int64_t', 'val')])
mod.add_function('client_Client_DataShards_Get', retval('int64_t'), [param('int64_t', 'handle')])
mod.add_function('client_Client_DataShards_Set', None, [param('int64_t', 'handle'), param('int64_t', 'val')])
mod.add_function('client_Client_ParityShards_Get', retval('int64_t'), [param('int64_t', 'handle')])
mod.add_function('client_Client_ParityShards_Set', None, [param('int64_t', 'handle'), param('int64_t', 'val')])
mod.add_function('client_Client_Shards_Get', retval('int64_t'), [param('int64_t', 'handle')])
mod.add_function('client_Client_Shards_Set', None, [param('int64_t', 'handle'), param('int64_t', 'val')])
add_checked_function(mod, 'client_Client_Dial', retval('bool'), [param('int64_t', '_handle'), param('int64_t', 'addrArr')])
add_checked_function(mod, 'client_Client_Close', None, [param('int64_t', '_handle'), param('bool', 'goRun')])
add_checked_function(mod, 'client_Client_Set', retval('bool'), [param('int64_t', '_handle'), param('char*', 'key'), param('int64_t', 'val')])
add_checked_function(mod, 'client_Client_Get', retval('int64_t'), [param('int64_t', '_handle'), param('char*', 'key')])
add_checked_function(mod, 'client_Client_GetVal', retval('int64_t'), [param('int64_t', '_handle'), param('char*', 'key')])
add_checked_function(mod, 'client_Client_ReadResponse', retval('char*'), [param('int64_t', '_handle'), param('int64_t', 'req')])
add_checked_function(mod, 'client_NewJoinReader', retval('int64_t'), [param('char*', 'data'), param('int64_t', 'size')])
add_checked_function(mod, 'client_NewClient', retval('int64_t'), [param('int64_t', 'dataShards'), param('int64_t', 'parityShards'), param('int64_t', 'ecMaxGoroutine')])
add_checked_function(mod, 'client_FlushLog', None, [param('bool', 'goRun')])
add_checked_function(mod, 'client_NewEncoder', retval('int64_t'), [param('int64_t', 'dataShards'), param('int64_t', 'parityShards'), param('int64_t', 'ecMaxGoroutine')])
add_checked_function(mod, 'client_CreateLog', None, [param('int64_t', 'opts'), param('bool', 'goRun')])

mod.generate(open('client.c', 'w'))

